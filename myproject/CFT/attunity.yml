####################################################################################
# Service Catalog Cloud formation template that provisions EC2 instances
# Created by: Raghu Cheeti
# Date: 07/05/2019
# Description : Used by Service Catalog as a product for launching an EC2 instance
#
####################################################################################

# ==============================
# Define CF Template Parameters
# ==============================

Parameters:
  InstanceTypeParameterApp:
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t3.2xlarge
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge    
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Description: 'Enter type of instance that needs to be provisioned. Default is t2.micro.'

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t3.xlarge
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge    
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Description: 'Enter type of instance that needs to be provisioned. Default is t2.micro.'    

  DomainName:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: DomainName
    NoEcho: true
  
  DomainJoinUsername :
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: LambdaParamUser
    NoEcho: true
    
  DomainJoinPassword :
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: LambdaParamPass
    NoEcho: true

  TypeOfInstance:
    Type: String
    Description: 'Two digit identifier for instace usage. Default is GC (General Compute)'
    AllowedValues:
      - GC
      - RD
      - DB
      - AP
      - BS
      - CS
      - AD
      - EM
      - JS

  AppCode:
    Type: String
    MaxLength: '5'
    AllowedPattern: '^([a-zA-Z0-9_-]){5}$'
    Description: 'The application code name cannot be of more that 5 characters'
    ConstraintDescription: "Appcode field does not match the required constraints"
    
  Environment:
    Type: String
    AllowedValues:
      - Prod
      - Test
      - Dev
      - QA
      - DR
      - Sandbox
    Default: Test

  Requestor:
    Type: String
    Description: Please specify email address of the requestor.

  OwnerContact:
    Type: String
    Description: Please specify email address of the owner.

  OS:
    Type: String
    AllowedValues:
      - WINDOWS2012
      - WINDOWS2016
      - WINDOWS2012WithTOMCAT      
    Description: 'Please specify OS type for Windows instance '
    Default: WINDOWS2016
    
  HADRTier:
    Type: String
    AllowedValues:
     - 1
     - 2
     - 3
     - 4
     - 5
    Default: 5
    Description: 'Please specify the DR tier for your instances'

  ApplicationTierApp:
    Type: String
    AllowedValues:
      - App
      - DataBase
      - Web
      - Visibility
      - White
      - Lambda
      - Prime
    Default: App

  ApplicationTierDB:
    Type: String
    AllowedValues:
      - App
      - DataBase
      - Web
      - Visibility
      - White
      - Lambda
    Default: DataBase  
  
  AvailabilityZone:
    Type: String
    Description: "Please select a, b or c"
    AllowedValues:
      - a
      - b
      - c

  AutomateShutdown:
    Type: String
    AllowedValues:
      - 'yes'
      - 'no'
    Description: 'This field specifies if the server needs to be automatically shut down every day.'
    Default: 'yes'

  OpsWindow:
    Type: String
    Default: '0700,1900'
    Description: 'Please enter the Start and Stop in the following format 0700,1900'

  WeekendOperation:
    Type: String
    Default: "FALSE"
    Description: 'This field specifies if the servers needs to be running during the weekend'
    AllowedValues:
      - "TRUE"
      - "FALSE"

  DataClassification:
    Type: String
    Description: 'This field specifies the type of data that would be residing on the servers'

  HostNumber01:
    Type: String
    AllowedPattern: '^([0-9]){2}$'
    Description: 'Please assigned a number for this EC2 instance between 01 and 99. Please make sure it is unique'
    ConstraintDescription: "Hostnumber field has to be a 2 digit number between 01 and 99"

  HostNumber02:
    Type: String
    AllowedPattern: '^([0-9]){2}$'
    Description: 'Please assigned a number for this EC2 instance between 01 and 99. Please make sure it is unique'
    ConstraintDescription: "Hostnumber field has to be a 2 digit number between 01 and 99"

  HostNumber03:
    Type: String
    AllowedPattern: '^([0-9]){2}$'
    Description: 'Please assigned a number for this EC2 instance between 01 and 99. Please make sure it is unique'
    ConstraintDescription: "Hostnumber field has to be a 2 digit number between 01 and 99"
   
 
# ==============================
# Define CF Template Mappings
# ==============================   

Mappings:
# Mappings for AMI ID information based on OS
  OS:
    'WINDOWS2012WithTOMCAT':
      AMI: "ami-0b63152fa5e6b6288"
      HdSize: 80
      DeviceName: "/dev/sda1"
      SecGroupL2: L2WINSG

    'WINDOWS2012':
      AMI: "ami-00f73244cf5790996"
      HdSize: 80
      DeviceName: "/dev/sda1"
      SecGroupL2: L2WINSG
    
    'WINDOWS2016':
      AMI: "ami-0d51a06241ce89926"
      HdSize: 128
      DeviceName: "/dev/sda1"
      SecGroupL2: L2WINSG

      AMI: "ami-0d51a06241ce89926"
      SecGroups2: L2WINSG
      SecGroups1: L1SG
      HdSize: 80
      DeviceName: "/dev/sda1"

# Mappings for Availability zones    
  AvailabilityZ:
      'zone':
        a: 'A'
        b: 'B'
        c: 'C'

  AccountIDMap:
    '707512021127':
      VPCShortName: Core
    '359300531472':
      VPCShortName: CoreTest
    '889535458826':
      VPCShortName: CoreDR
    '434940588922':
      VPCShortName: EnterpriseProd
    '129801215131':
      VPCShortName: EnterpriseQA
    '288355943657':
      VPCShortName: EnterpriseDev
    '524246855650':
      VPCShortName: EnterpriseSandbox
    '120380718976':
      VPCShortName: NEERProd
    '926173705195':
      VPCShortName: NEERQA
    '733125211443':
      VPCShortName: NEERDev
    '484902404805':
      VPCShortName: NEERSandbox
    '678078281154':
      VPCShortName: NEERTest
    '430004966399':
      VPCShortName: FPLProd
    '485449107334':
      VPCShortName: FPLQA
    '977465404123':
      VPCShortName: FPLDev
    '237980099910':
      VPCShortName: FPLSandbox
    '688642023437':
      VPCShortName: SecurityProd
    '343234139589':
      VPCShortName: SecurityTest
    '480804328775':
      VPCShortName: Isolation
    '914606261750':
      VPCShortName: NEERDR
    '202055847252':
      VPCShortName: FPLDR
    '516627182506':
      VPCShortName: FPLTest
    '719322411134':
      VPCShortName: GulfPowerDev
    '546978450329':
      VPCShortName: GulfPowerTest
    '649713442868': 
      VPCShortName: GulfPowerQA
    '374887338695': 
      VPCShortName: GulfPowerProd 
# ==============================
# Define CF Template Resources
# ==============================

Resources:
#################################### Template ####################################

#------GULF 801 ------

 EC2INSTANCEVOLUME01:
    Type: "AWS::EC2::Volume"
    Properties:
      AvailabilityZone: !Join
      - ''
      - - !Ref AWS::Region
        - !Ref AvailabilityZone
      Size: "500"
      VolumeType: gp2
      Encrypted: True
      KmsKeyId: !ImportValue Host-Default-KMS

 EC2Instance01:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: "NEE-AT878-EC2-Role"
      InstanceType: !Ref InstanceTypeParameterApp
      ImageId: !FindInMap [ OS , !Ref OS, AMI ]
      AvailabilityZone: !Join
      - ''
      - - !Ref AWS::Region
        - !Ref AvailabilityZone
      SecurityGroupIds:
       - Fn::ImportValue:
            !Join ['-',[ "SG", !FindInMap [ AccountIDMap, !Ref "AWS::AccountId", VPCShortName ],!FindInMap [ OS , !Ref OS , SecGroupL2 ] ] ]
       - Fn::ImportValue:
            !Join ['-',[ "SG", !FindInMap [ AccountIDMap, !Ref "AWS::AccountId", VPCShortName ], "L1SG" ] ]
       - !Ref  L4AT878SG
      SubnetId:
        Fn::ImportValue:
          !Join ["-", ["VPC", !FindInMap [ AccountIDMap, !Ref "AWS::AccountId", VPCShortName ], !FindInMap [ AvailabilityZ, zone, !Ref AvailabilityZone  ], !Ref ApplicationTierApp,"SUBNET"]]
      BlockDeviceMappings:
        - DeviceName: !FindInMap [ OS , !Ref OS, DeviceName ]
          Ebs:
            VolumeType: gp2
            VolumeSize: !FindInMap [ OS , !Ref OS, HdSize ]

      Volumes:

       - VolumeId: !Ref EC2INSTANCEVOLUME01
         Device: /dev/xvdb      

#################################### Execute commands and boot time. ####################################
      UserData:
        Fn::Base64:
          Fn::Sub:
          - |
            #cloud-config
            runcmd:
            "<script> powershell.exe "C:\Temp\DomainJoin.ps1" -domain "${DomainName}" -domainUsername "${domainUsername}" -domainPassword "${domainPassword}" -Ec2Hostname "${Ec2Hostname}" </script>"
          - { domain: !Ref DomainName, domainUsername: !Ref DomainJoinUsername, domainPassword: !Ref DomainJoinPassword, Ec2Hostname: !Join [ "-", [ !Join ["",['2', !ImportValue  Account-Global-AccountCode, "V"]], !Ref TypeOfInstance, !Join ['',[ !Ref AppCode, !Ref HostNumber01 ]]]]  } 

      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - Fn::Join:
                  - ''
                  - - "2"
                    - !ImportValue  Account-Global-AccountCode
                    - Fn::ImportValue:
                        !Join ['-',[Account-Global-RegionCode, !Ref "AWS::Region"]]
                - !Ref TypeOfInstance
                - !Join ['',[ !Ref AppCode, !Ref HostNumber01 ]]

        - Key: AppCode
          Value: !Ref AppCode
        - Key: Environment
          Value: !Ref Environment
        - Key: Requestor
          Value: !Ref Requestor
        - Key: OwnerContact
          Value: !Ref OwnerContact
        - Key: OS
          Value: !Ref OS
        - Key: HA_DRTier
          Value: !Ref HADRTier
        - Key:  ApplicationTierApp
          Value: !Ref  ApplicationTierApp
        - Key: AutomateShutdown
          Value: !Ref AutomateShutdown
        - Key: OpsWindow
          Value: !Ref OpsWindow
        - Key: WeekendOperation
          Value: !Ref WeekendOperation
        - Key: DataClassification
          Value: !Ref DataClassification

 L4AT878SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join
        - '-'
        - - L4
          - !Ref AppCode
          - !Ref ApplicationTierApp
          - AT878
          - !FindInMap [AccountIDMap, !Ref "AWS::AccountId", VPCShortName]
          - !ImportValue Account-Global-AccountCode
          - SG
      GroupDescription: Layer 4 Security Group for ECS Cluster
      VpcId:
        Fn::ImportValue:
          Fn::Join:
          - "-"
          - - "VPC"
            - !FindInMap [AccountIDMap, !Ref "AWS::AccountId", VPCShortName]
            - "VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.122.0.0/15
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.142.240.0/20
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.230.0.0/20
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.231.0.0/18
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.242.64.0/19
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.252.0.0/16
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.255.64.0/18
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 172.30.0.0/15
        Description: HTTPS from on-prem
      Tags:
        - Key: AppCode
          Value: !Ref AppCode
        - Key: Name
          Value: !Join
            - '-'
            - - L4
              - !Ref AppCode
              - !Ref ApplicationTierApp
              - AT878
              - !FindInMap [AccountIDMap, !Ref "AWS::AccountId", VPCShortName]
              - !ImportValue Account-Global-AccountCode
              - SG              


  #------GULF 802 ------

 EC2INSTANCEVOLUME02:
    Type: "AWS::EC2::Volume"
    Properties:
      AvailabilityZone: !Join
      - ''
      - - !Ref AWS::Region
        - !Ref AvailabilityZone
      Size: "500"
      VolumeType: gp2
      Encrypted: True
      KmsKeyId: !ImportValue Host-Default-KMS

 EC2Instance02:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: false
      InstanceType: !Ref InstanceTypeParameter
      ImageId: !FindInMap [ OS , !Ref OS, AMI ]
      AvailabilityZone: !Join
      - ''
      - - !Ref AWS::Region
        - !Ref AvailabilityZone
      SecurityGroupIds:
       - Fn::ImportValue:
            !Join ['-',[ "SG", !FindInMap [ AccountIDMap, !Ref "AWS::AccountId", VPCShortName ],!FindInMap [ OS , !Ref OS , SecGroupL2 ] ] ]
       - Fn::ImportValue:
            !Join ['-',[ "SG", !FindInMap [ AccountIDMap, !Ref "AWS::AccountId", VPCShortName ], "L1SG" ] ]
       - !Ref  L4AT878SG
      SubnetId:
        Fn::ImportValue:
          !Join ["-", ["VPC", !FindInMap [ AccountIDMap, !Ref "AWS::AccountId", VPCShortName ], !FindInMap [ AvailabilityZ, zone, !Ref AvailabilityZone  ], !Ref ApplicationTierApp,"SUBNET"]]
      BlockDeviceMappings:
        - DeviceName: !FindInMap [ OS , !Ref OS, DeviceName ]
          Ebs:
            VolumeType: gp2
            VolumeSize: !FindInMap [ OS , !Ref OS, HdSize ]

      Volumes:

       - VolumeId: !Ref EC2INSTANCEVOLUME02
         Device: /dev/xvdb      

#################################### Execute commands and boot time. ####################################
      UserData:
        Fn::Base64:
          Fn::Sub:
          - |
            #cloud-config
            runcmd:
            "<script> powershell.exe "C:\Temp\DomainJoin.ps1" -domain "${DomainName}" -domainUsername "${domainUsername}" -domainPassword "${domainPassword}" -Ec2Hostname "${Ec2Hostname}" </script>"
          - { domain: !Ref DomainName, domainUsername: !Ref DomainJoinUsername, domainPassword: !Ref DomainJoinPassword, Ec2Hostname: !Join [ "-", [ !Join ["",['2', !ImportValue  Account-Global-AccountCode, "V"]], !Ref TypeOfInstance, !Join ['',[ !Ref AppCode, !Ref HostNumber02 ]]]]  } 

      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - Fn::Join:
                  - ''
                  - - "2"
                    - !ImportValue  Account-Global-AccountCode
                    - Fn::ImportValue:
                        !Join ['-',[Account-Global-RegionCode, !Ref "AWS::Region"]]
                - !Ref TypeOfInstance
                - !Join ['',[ !Ref AppCode, !Ref HostNumber02 ]]

        - Key: AppCode
          Value: !Ref AppCode
        - Key: Environment
          Value: !Ref Environment
        - Key: Requestor
          Value: !Ref Requestor
        - Key: OwnerContact
          Value: !Ref OwnerContact
        - Key: OS
          Value: !Ref OS
        - Key: HA_DRTier
          Value: !Ref HADRTier
        - Key:  ApplicationTierApp
          Value: !Ref  ApplicationTierApp
        - Key: AutomateShutdown
          Value: !Ref AutomateShutdown
        - Key: OpsWindow
          Value: !Ref OpsWindow
        - Key: WeekendOperation
          Value: !Ref WeekendOperation
        - Key: DataClassification
          Value: !Ref DataClassification

 L4AT878SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join
        - '-'
        - - L4
          - !Ref AppCode
          - !Ref ApplicationTierApp
          - AT878
          - !FindInMap [AccountIDMap, !Ref "AWS::AccountId", VPCShortName]
          - !ImportValue Account-Global-AccountCode
          - SG
      GroupDescription: Layer 4 Security Group for ECS Cluster
      VpcId:
        Fn::ImportValue:
          Fn::Join:
          - "-"
          - - "VPC"
            - !FindInMap [AccountIDMap, !Ref "AWS::AccountId", VPCShortName]
            - "VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.122.0.0/15
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.142.240.0/20
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.230.0.0/20
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.231.0.0/18
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.242.64.0/19
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.252.0.0/16
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.255.64.0/18
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 172.30.0.0/15
        Description: HTTPS from on-prem
      Tags:
        - Key: AppCode
          Value: !Ref AppCode
        - Key: Name
          Value: !Join
            - '-'
            - - L4
              - !Ref AppCode
              - !Ref ApplicationTierApp
              - AT878
              - !FindInMap [AccountIDMap, !Ref "AWS::AccountId", VPCShortName]
              - !ImportValue Account-Global-AccountCode
              - SG      



    #------GULF 803 ------

 EC2INSTANCEVOLUME03:
    Type: "AWS::EC2::Volume"
    Properties:
      AvailabilityZone: !Join
      - ''
      - - !Ref AWS::Region
        - !Ref AvailabilityZone
      Size: "500"
      VolumeType: gp2
      Encrypted: True
      KmsKeyId: !ImportValue Host-Default-KMS

 EC2Instance03:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: false
      InstanceType: !Ref InstanceTypeParameter
      ImageId: !FindInMap [ OS , !Ref OS, AMI ]
      AvailabilityZone: !Join
      - ''
      - - !Ref AWS::Region
        - !Ref AvailabilityZone
      SecurityGroupIds:
       - Fn::ImportValue:
            !Join ['-',[ "SG", !FindInMap [ AccountIDMap, !Ref "AWS::AccountId", VPCShortName ],!FindInMap [ OS , !Ref OS , SecGroupL2 ] ] ]
       - Fn::ImportValue:
            !Join ['-',[ "SG", !FindInMap [ AccountIDMap, !Ref "AWS::AccountId", VPCShortName ], "L1SG" ] ]
       - !Ref  L4AT878SG       
      SubnetId:
        Fn::ImportValue:
          !Join ["-", ["VPC", !FindInMap [ AccountIDMap, !Ref "AWS::AccountId", VPCShortName ], !FindInMap [ AvailabilityZ, zone, !Ref AvailabilityZone  ], !Ref ApplicationTierDB,"SUBNET"]]
      BlockDeviceMappings:
        - DeviceName: !FindInMap [ OS , !Ref OS, DeviceName ]
          Ebs:
            VolumeType: gp2
            VolumeSize: !FindInMap [ OS , !Ref OS, HdSize ]

      Volumes:

       - VolumeId: !Ref EC2INSTANCEVOLUME03
         Device: /dev/xvdb      

#################################### Execute commands and boot time. ####################################
      UserData:
        Fn::Base64:
          Fn::Sub:
          - |
            #cloud-config
            runcmd:
            "<script> powershell.exe "C:\Temp\DomainJoin.ps1" -domain "${DomainName}" -domainUsername "${domainUsername}" -domainPassword "${domainPassword}" -Ec2Hostname "${Ec2Hostname}" </script>"
          - { domain: !Ref DomainName, domainUsername: !Ref DomainJoinUsername, domainPassword: !Ref DomainJoinPassword, Ec2Hostname: !Join [ "-", [ !Join ["",['2', !ImportValue  Account-Global-AccountCode, "V"]], !Ref TypeOfInstance, !Join ['',[ !Ref AppCode, !Ref HostNumber03 ]]]]  } 

      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - Fn::Join:
                  - ''
                  - - "2"
                    - !ImportValue  Account-Global-AccountCode
                    - Fn::ImportValue:
                        !Join ['-',[Account-Global-RegionCode, !Ref "AWS::Region"]]
                - !Ref TypeOfInstance
                - !Join ['',[ !Ref AppCode, !Ref HostNumber03 ]]

        - Key: AppCode
          Value: !Ref AppCode
        - Key: Environment
          Value: !Ref Environment
        - Key: Requestor
          Value: !Ref Requestor
        - Key: OwnerContact
          Value: !Ref OwnerContact
        - Key: OS
          Value: !Ref OS
        - Key: HA_DRTier
          Value: !Ref HADRTier
        - Key: ApplicationTierDB
          Value: !Ref ApplicationTierDB
        - Key: AutomateShutdown
          Value: !Ref AutomateShutdown
        - Key: OpsWindow
          Value: !Ref OpsWindow
        - Key: WeekendOperation
          Value: !Ref WeekendOperation
        - Key: DataClassification
          Value: !Ref DataClassification  

 L4AT878SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join
        - '-'
        - - L4
          - !Ref AppCode
          - !Ref ApplicationTierDB
          - AT878
          - !FindInMap [AccountIDMap, !Ref "AWS::AccountId", VPCShortName]
          - !ImportValue Account-Global-AccountCode
          - SG
      GroupDescription: Layer 4 Security Group for ECS Cluster
      VpcId:
        Fn::ImportValue:
          Fn::Join:
          - "-"
          - - "VPC"
            - !FindInMap [AccountIDMap, !Ref "AWS::AccountId", VPCShortName]
            - "VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.122.0.0/15
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.142.240.0/20
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.230.0.0/20
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.231.0.0/18
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.242.64.0/19
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.252.0.0/16
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.255.64.0/18
        Description: HTTPS from on-prem
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 172.30.0.0/15
        Description: HTTPS from on-prem
      Tags:
        - Key: AppCode
          Value: !Ref AppCode
        - Key: Name
          Value: !Join
            - '-'
            - - L4
              - !Ref AppCode
              - !Ref ApplicationTierDB
              - AT878
              - !FindInMap [AccountIDMap, !Ref "AWS::AccountId", VPCShortName]
              - !ImportValue Account-Global-AccountCode
              - SG                     
